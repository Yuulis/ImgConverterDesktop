name: Build Flet app on version tag

on:
  push:
    tags:
      - "ver.*"

permissions:
  contents: write

jobs:
  validate:
    name: Validate tag and branch
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.setvars.outputs.version }}
      tag: ${{ steps.setvars.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify tag format and that it points to main
        id: verify
        shell: bash
        run: |
          set -euo pipefail
          TAG_REF_NAME="${GITHUB_REF_NAME}"
          echo "Tag: ${TAG_REF_NAME}"
          if [[ ! "${TAG_REF_NAME}" =~ ^ver\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Tag does not match required pattern ver.x.x.x (digits only)." >&2
            exit 1
          fi

          # Ensure the tagged commit is contained in main branch history
          git fetch origin main --prune --no-tags
          if git merge-base --is-ancestor "${GITHUB_SHA}" origin/main; then
            echo "Tag commit is in main branch history."
          else
            echo "Tag commit is NOT in main branch history. Please tag a commit from main." >&2
            exit 1
          fi

      - name: Set outputs
        id: setvars
        shell: bash
        run: |
          TAG_REF_NAME="${GITHUB_REF_NAME}"
          VERSION="${TAG_REF_NAME#ver.}"
          {
            echo "version=${VERSION}";
            echo "tag=${TAG_REF_NAME}";
          } >> "$GITHUB_OUTPUT"

  build:
    name: Build (${{ matrix.os }} â†’ ${{ matrix.target }})
    needs: validate
    runs-on: ${{ matrix.os }}
    env:
      PYTHONUTF8: "1"
      PYTHONIOENCODING: "utf-8"
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: windows
          - os: macos-latest
            target: macos
          - os: ubuntu-latest
            target: linux

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Linux desktop prerequisites
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "flet[all]==0.28.3" Pillow>=10.0.0 pillow-heif>=0.16.0

      - name: Run unit tests
        run: |
          python -m unittest discover -s tests -p "test_*.py" -v

      - name: Build (flet build ${{ matrix.target }})
        run: |
          flet --version
          flet build ${{ matrix.target }} --build-version ${{ needs.validate.outputs.version }} --build-number ${{ github.run_number }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ImgConverterDesktop-${{ needs.validate.outputs.version }}-${{ matrix.target }}
          path: build/${{ matrix.target }}/**
          if-no-files-found: error

  release:
    name: Create GitHub Release and upload assets
    needs: [validate, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:" 
          ls -la artifacts

      - name: Zip per-target artifacts
        run: |
          mkdir -p artifacts-zip
          shopt -s nullglob
          for d in artifacts/*; do
            if [ -d "$d" ]; then
              base=$(basename "$d")
              (cd "$d" && zip -r "../${base}.zip" .)
              mv "artifacts/${base}.zip" "artifacts-zip/${base}.zip" || true
            fi
          done
          ls -la artifacts-zip

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate.outputs.tag }}
          name: ImgConverterDesktop ver.${{ needs.validate.outputs.version }}
          files: |
            artifacts-zip/*.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
